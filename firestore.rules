rules_version = '1';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if user is staff
    function isStaff() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'staff';
    }

    // Users collection - public read for login, admin only write, users can update their own doc
    match /users/{userId} {
      allow read: if true;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow write: if isAdmin();
    }

    // Reporter collection - public read, users can update their own profile, admin and staff can write
    match /reporter/{userId} {
      allow read: if true;
      allow create, update: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && (isAdmin() || isStaff());
      allow delete: if isAdmin();
    }

    // Reports collection - public read, authenticated users can create
    match /reports/{reportId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
        resource.data.uid == request.auth.uid || 
        isStaff()
      );
      allow delete: if request.auth != null && isStaff();

      // IncidentChat messages subcollection
      match /messages/{messageId} {
        // Allow all authenticated users to read messages.
        allow read: if request.auth != null;
        
        // Allow write if either:
        // 1. The authenticated user is the incident reporter (creator of the report)
        // OR
        // 2. The user is staff AND belongs to the same municipal as the report.
        allow write: if request.auth != null && (
          get(/databases/$(database)/documents/reports/$(reportId)).data.uid == request.auth.uid ||
          ( isStaff() &&
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.municipal ==
            get(/databases/$(database)/documents/reports/$(reportId)).data.municipal
          )
        );
      }
    }

    // Municipal data - public read, staff can write
    match /municipals/{municipalId} {
      allow read: if true;
      allow write: if request.auth != null && (isStaff() || isAdmin());
    }

    // Municipal admin data - staff only
    match /municipalAdmins/{adminId} {
      allow read, write: if request.auth != null && isStaff();
    }

    // Admin data - admin only
    match /adminData/{docId} {
      allow read, write: if isAdmin();
    }

    // Incident types - public read, staff can write
    match /incidentTypes/{typeId} {
      allow read: if true;
      allow write: if request.auth != null && (isStaff() || isAdmin());
    }

    // User preferences - users can access their own
    match /userPreferences/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Audit logs - view-only for admin, no write
    match /audit/{auditId} {
      allow read: if isAdmin();
      allow write, update, delete: if false;
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}